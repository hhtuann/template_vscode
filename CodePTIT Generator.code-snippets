{
	"CodePTIT Generator": {
		"prefix": "gen-cp",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"using namespace std::chrono;",
			"",
			"#ifdef HoangHoangTuan",
			"#include <debug.h>",
			"#else",
			"#define debug(...) 1901",
			"#define eprintln(...) 2005",
			"#endif",
			"",
			"#define rand(l, r) uniform_int_distribution<int64_t>(l, r)(rng)",
			"mt19937 rng(steady_clock::now().time_since_epoch().count());",
			"",
			"inline void runCode(const string &, const string &, const string &);",
			"inline void generateTestIO(int &, const string &, const string &, const string &);",
			"inline void gradeWithIO(int &, const string &, const string &, const string &, const string &);",
			"inline string formatIndex(int &);",
			"",
			"#define LL long long",
			"#define endl '\\n'",
			"const string PROBLEM_NAME = \"HoangHoangTuan\";",
			"const int FROM = 1;",
			"const int TO = 10;",
			"const int TIME_LIMIT = 2000;",
			"const int MAXN = 1e5 + 5;",
			"",
			"inline void prepare() { return; }",
			"",
			"inline void generateInput(int &testID, const string &inputPath)",
			"{",
			"    ofstream fout(inputPath);",
			"    // Generate in here",
			"",
			"    eprintln(\"Test %02d: Generated successfully!\", testID);",
			"    return;",
			"}",
			"",
			"signed main()",
			"{",
			"    prepare();",
			"",
			"    filesystem::create_directory(\"test\");",
			"    filesystem::create_directory(\"ans\");",
			"",
			"    for (int testID = FROM; testID <= TO; ++testID)",
			"    {",
			"        string idx = formatIndex(testID);",
			"",
			"        string inputPath = R\"(.\\test\\)\" + idx + R\"(.in)\";      // input file path",
			"        string outputPathOUT = R\"(.\\test\\)\" + idx + R\"(.out)\"; // your code",
			"        string outputPathANS = R\"(.\\ans\\)\" + idx + R\"(.ans)\";  // brute-force code",
			"",
			"        // generateInput(testID, inputPath);",
			"        generateTestIO(testID, PROBLEM_NAME, inputPath, outputPathOUT);",
			"        // gradeWithIO(testID, PROBLEM_NAME, inputPath, outputPathOUT, outputPathANS);",
			"    }",
			"",
			"    return 0;",
			"}",
			"",
			"inline void runCode(const string &exe, const string &input, const string &output)",
			"{",
			"    string cmd = exe + \".exe < \" + input + \" > \" + output;",
			"    system(cmd.c_str());",
			"    return;",
			"}",
			"",
			"inline void generateTestIO(int &testID, const string &exe, const string &input, const string &output)",
			"{",
			"    generateInput(testID, input);",
			"    runCode(exe, input, output);",
			"    return;",
			"}",
			"",
			"inline void gradeWithIO(int &testID, const string &exe, const string &input, const string &out, const string &ans)",
			"{",
			"    auto start = steady_clock::now();",
			"    runCode(exe, input, ans);",
			"    auto stop = steady_clock::now();",
			"",
			"    auto displayFile = [&](const string &path)",
			"    {",
			"        eprintln(\"***** %s\", path.c_str());",
			"        ifstream in(path);",
			"        string line;",
			"        while (getline(in, line))",
			"            eprintln(\"%s\", line.c_str());",
			"        eprintln(\"*****\\n\");",
			"    };",
			"",
			"    double time = duration_cast<milliseconds>(stop - start).count();",
			"    if (time - TIME_LIMIT > 10)",
			"    {",
			"        displayFile(input);",
			"        eprintln(\"Test %02d: Time Limit Exceeded\", testID);",
			"        eprintln(\"Running time: %.0lf ± 10 ms\\n\", time);",
			"        eprintln(\"====================================\\n\");",
			"        return;",
			"    }",
			"",
			"    string cmd = \"fc \" + out + \" \" + ans;",
			"    if (system(cmd.c_str()))",
			"    {",
			"",
			"        displayFile(input);",
			"        eprintln(\"Test %02d: Wrong Answer\\n\", testID);",
			"        eprintln(\"======================================\\n\");",
			"    }",
			"    else",
			"    {",
			"        eprintln(\"Test %02d: Accepted\", testID);",
			"        eprintln(\"Running time: %.0lf ± 10 ms\\n\", time);",
			"        eprintln(\"======================================\\n\");",
			"    }",
			"    return;",
			"}",
			"",
			"inline string formatIndex(int &idx)",
			"{",
			"    ostringstream oss;",
			"    oss << setw(2) << setfill('0') << idx;",
			"    return oss.str();",
			"}",
			"/* Take Off Toward Your Dream ! */"
		],
		"description": "CodePTIT Generator"
	}
}